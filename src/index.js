const { getManagedDevices, generateExcelReport, sendEmailWithAttachment } = require('./deviceManager');
const { getToken } = require('./auth');
const cron = require('cron').CronJob;
const config = require('../config'); // ‚úÖ Asegurar que config est√© bien cargado

const getCurrentTimestamp = () => {
    return new Date().toLocaleString("es-CL", { timeZone: "America/Santiago" }).replace(',', '');
};

const runBot = async () => {
    try {
        console.log("üöÄ Iniciando el BOT de gesti√≥n de dispositivos...");
        console.log(`üïí Inicio del bot: ${getCurrentTimestamp()}`);

        // Obtener el token de autenticaci√≥n
        const token = await getToken();
        if (!token) {
            throw new Error("‚ùå No se pudo obtener el token de autenticaci√≥n.");
        }

        console.log("üîë Token obtenido con √©xito.");

        // Obtener dispositivos y procesar datos
        await getManagedDevices(token);

        // Generar el archivo Excel
        const filePath = await generateExcelReport();

        // Enviar el archivo por correo
        await sendEmailWithAttachment(filePath);
        
        console.log(`üïí Termino del bot: ${getCurrentTimestamp()}`);
        console.log("‚úÖ Proceso completado exitosamente.");
    } catch (error) {
        console.error('‚ùå Error en la ejecuci√≥n:', error);
    }
};

// ‚úÖ Ejecutar el bot inmediatamente si est√° habilitado en config
if (config.RUN_ON_STARTUP) {
    runBot();
}

// ‚úÖ Configurar cron job solo si `CRON_SCHEDULE` est√° definido en config
if (config.CRON_SCHEDULE) {
    new cron(
        config.CRON_SCHEDULE,
        async () => {
            await runBot();
        },
        null,
        true,
        config.TIMEZONE || "America/Santiago"
    ).start();

    console.log(`‚è≥ Cron job configurado para ejecutarse con la expresi√≥n: "${config.CRON_SCHEDULE}" en zona horaria: "${config.TIMEZONE || "America/Santiago"}"`);
}
